{"remainingRequest":"E:\\求美新库\\reader-po\\node_modules\\babel-loader\\lib\\index.js!E:\\求美新库\\reader-po\\src\\utils\\request.js","dependencies":[{"path":"E:\\求美新库\\reader-po\\src\\utils\\request.js","mtime":1685603480491},{"path":"E:\\求美新库\\reader-po\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1685600561614},{"path":"E:\\求美新库\\reader-po\\node_modules\\babel-loader\\lib\\index.js","mtime":1685600568530}],"contextDependencies":[],"result":["import axios from 'axios';\nvar request = axios.create({\n  baseURL: \"https://www.gonb.net/\",\n  //使用/api作为基地址\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(function (config) {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // config.headers['token'] = user.token;  // 设置请求头\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(function (response) {\n  var res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;",{"version":3,"sources":["E:\\求美新库\\reader-po\\src\\utils\\request.js"],"names":["axios","request","create","baseURL","timeout","interceptors","use","config","headers","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE,uBADkB;AACO;AAClCC,EAAAA,OAAO,EAAE;AAFkB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACzCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADyC,CAGzC;;AACA,SAAOD,MAAP;AACD,CALD,EAKG,UAAAE,KAAK,EAAI;AACV,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAPD,E,CASA;AACA;;AACAR,OAAO,CAACI,YAAR,CAAqBO,QAArB,CAA8BN,GAA9B,CACE,UAAAM,QAAQ,EAAI;AACV,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADU,CAEV;;AACA,MAAIF,QAAQ,CAACL,MAAT,CAAgBQ,YAAhB,KAAiC,MAArC,EAA6C;AAC3C,WAAOF,GAAP;AACD,GALS,CAMV;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAH,GAAqBA,GAA9B;AACD;;AACD,SAAOA,GAAP;AACD,CAZH,EAaE,UAAAJ,KAAK,EAAI;AACPS,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQV,KAApB,EADO,CACoB;;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAhBH;AAmBA,eAAeR,OAAf","sourcesContent":["import axios from 'axios'\n \nconst request = axios.create({\n  baseURL: \"https://www.gonb.net/\", //使用/api作为基地址\n  timeout: 5000\n})\n \n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n \n  // config.headers['token'] = user.token;  // 设置请求头\n  return config\n}, error => {\n  return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n  response => {\n    let res = response.data;\n    // 如果是返回的文件\n    if (response.config.responseType === 'blob') {\n      return res\n    }\n    // 兼容服务端返回的字符串数据\n    if (typeof res === 'string') {\n      res = res ? JSON.parse(res) : res\n    }\n    return res;\n  },\n  error => {\n    console.log('err' + error) // for debug\n    return Promise.reject(error)\n  }\n)\n \nexport default request;\n "]}]}